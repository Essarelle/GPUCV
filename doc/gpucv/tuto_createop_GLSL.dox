/*! \page TUTO_CREATE_OP_GLSL Creating a GpuCV operator - using OpenGL and GLSL -
 * \section TUTO_CREATE_OP_GLSL__SCT_INTRO Intro
 * \par "PRE-REQUIS"
 <ul>
	<li>\ref TUTO_CREATE_OP_BASE</li>
	<li>Basic GLSL programming</li>
 </ul>
 \sa 
 \author Yannick Allusse
 \version GpuCV v0.4.2 rev 487
 \note Turorial tag: <b>TUTO_CREATE_OP_GLSL_TAG</b>
 
 *
<br>In this tutorial, we will describe how to create a simple arithmetics operators using templates functions supply by GpuCV and GLSL language ( ex:Add). Theses templates are used to declare arithmetic operators for any kind of input, output, and channels number.
<br><br>Follow the key tag <b>TUTO_CREATE_OP_GLSL_TAG*</b> in full project source code to have the correspondance of each steps: 
 <ol>
	 <li>\ref TUTO_CREATE_OP_GLSL__STP1__LAUNCHER</li>
	 <li>\ref TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER
	 	<ol>
			<li>\ref TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER_HEADER</li>
			<li>\ref TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER_BODY</li>			
		</ol>
	</li>
	<li>\ref TUTO_CREATE_OP_GLSL__STP3__RENDER_2_TEXTURE</li>
</ol>

\par Files to edit
First, open/create the corresponding file:
<ul>
	<li>src/GPUCV/cxcoreg.[cpp/h] for a <b>cxcore</b> operator</li>
	<li>src/GPUCV/cvg.[cpp/h] for a <b>cv</b> operator</li>
	<li>src/GPUCV/cvaux.[cpp/h] for a <b>cvaux</b> operator</li>
	<li>src/GPUCV/custom.[cpp/h] for a <b>user custom</b> operator</li>
</ul>
And the corresponding shader files:
<ul>
	<li>bin/FShader/NEW_SHADER.frag for fragment shader</li>
	<li>bin/VShader/NEW_SHADER.vert for vertex shader</li>
	<li>bin/GShader/NEW_SHADER.geo for geometry shader</li>
</ul>


* \section TUTO_CREATE_OP_GLSL__STP1__LAUNCHER  Writing the operator launcher
* <i>Tag:</i> <b>TUTO_CREATE_OP_GLSL_TAG__STP1__LAUNCHER</b><br>
The first step of creating a operator launcher is to define all the data and parameters that the filter requires to execute. Then we makes sure they are acceptable/compatible by/with the filter.
<br>
<br>GpuCV supplies a useful generic function to call most of the shader based operators: TemplateOperator()
<br>It loads data to GPU if required, performs extra control, execute the given shader and return data to cpu if required.
<br>
<br>Let's have a look at all the parameters required:
\code
void TemplateOperator  	(  	
	std::string   	_fctName,			//name of the C++ current function
	std::string  	_filename1,			//path and name of the fragment shader program file(without the .frag)
	std::string  	_filename2,			//path and name of the vertex shader program file(without the .vert), here we will use the default vertex shader, no need to specify one.
	CvArr *  		_src1,			//input image one
	CvArr *  		_src2,			//input image two
	CvArr *  		_src3,			//input image three
	CvArr *  		_dest,			//destination image
	const float *  	_params,			//array of optional parameters
	unsigned int  	_param_nbr,			//nomber of parmeters
	TextureGrp::TextureGrp_CheckFlag  	_controlFlag,		//Optional control flags on input/ouput data
	std::string  	_optionalMetaTag,	//Optional meta-tag to generate meta-shaders
	FCT_PTR_DRAW_TEXGRP(_DrawFct)	 		//custom drawing function is used for advenced operators and will be explain in another tutorial.		
	) 	
\endcode

The following subsections describes several cases of the 'addition' example.

\par Add two images
First case of the 'addition': adding two images
\code
	TemplateOperator(
		"cvgAdd",			//name of the launcher function
		"FShaders/add",		//name of the fragment shader program file we want to use
		"",					//using default vertex program
		src1,			
		src2,
		NULL,				//no mask
		dst,				//destination image
		NULL,				//no parameters
		0,			
		TextureGrp::TEXTGRP_SAME_SIZE,	//all image should have the same size
		"",				
		NULL
	);
\endcode
This is enought to call our filter.


\par  Add two images using a mask
Second case of the 'addition': adding two images using a mask
\code
	TemplateOperator(
		"cvgAdd",			//name of the launcher function
		"FShaders/add_mask",		//name of the fragment shader program file we want to use
		"",					//using default vertex program
		src1,			
		src2,
		mask,				//*mask*
		dst,				//destination image
		NULL,				//no parameters
		0,			
		TextureGrp::TEXTGRP_SAME_SIZE,	//all image should have the same size
		"",				
		NULL
	);
\endcode
This is enought to call our filter using a mask.


\par  Add one image and one scalar
Third case of the 'addition': adding one images with one scalar value
\code
	float Params[4];
	...//copy scalar values into Params
	
	TemplateOperator(
		"cvgAdd",			//name of the launcher function
		"FShaders/add_scalar",		//name of the fragment shader program file we want to use
		"",					//using default vertex program
		src1,			
		NULL,				//*no second input image*
		NULL,				//no mask
		dst,				//destination image
		Params,				//*Parameters pointer*
		4,					//*Parameters number*
		TextureGrp::TEXTGRP_SAME_SIZE,	//all image should have the same size
		"",				
		NULL
	);
\endcode
This is enought to call our filter using a scalar parameter.

\par  Add one image and one scalar using a mask
Third case of the 'addition': adding one images with one scalar value
\code
	float Params[4];
	...//copy scalar values into Params
	
	TemplateOperator(
		"cvgAdd",			//name of the launcher function
		"FShaders/add_scalar",		//name of the fragment shader program file we want to use
		"",					//using default vertex program
		src1,			
		mask,				//*second became mask image*
		NULL,				//
		dst,				//destination image
		Params,				//Parameters pointer
		4,					//Parameters number
		TextureGrp::TEXTGRP_SAME_SIZE,	//all image should have the same size
		"",				
		NULL
	);
\endcode
This is enought to call our filter using a scalar parameter with mask.



 * \section TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER Writing the shader programs
 * \note GpuCV currently only accepts GLSL shader code. This section will explain you how to write shader program for GpuCV but will not explain you what is a shader and how it works. You should already have some 'really basic' knownledge of shader programming.
 * \sa <a href="http://oss.sgi.com/projects/ogl-sample/registry/ARB/GLSLangSpec.Full.1.10.59.pdf" target=blank>GLSL specifications</a>, <a href="http://www.lighthouse3d.com/opengl/glsl/index.php?shaders" target=blanck>GLSL tutorial</a>.
 * <i>Tag:</i> <b>TUTO_CREATE_OP_BASE_TAG__STP2__WRITE_SHADER</b><br>
 A shader program can be:
	<ol>
		<li>A fragment or pixel shader (.frag): is executed for each pixels of the framebuffer.</li>	 
		<li>A vertex shader (.vert): is executed for each vertex of the geometry, most GpuCV operator will used default vertex shader.</li>	 
		<li>A geometry shader (.geo): (not yet available in GpuCV) is executed to generate geometry.</li>
	</ol>
 
 GpuCV supply some tools to hide some of the shader complexity so you do not need to be expert with GLSL. Let's have a look at the base structure of a fragment shader. All shader files should be saved into the default shader paths ("bin\FShader\", "bin\VShader\").
 
  *\subsection TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER_HEADER Shader file header
You will find the following references inside the definitions
 <ul>
 <li>License</li>
 <li>Fragment name or function description</li>
 <li>'CVG_METASHADERBegin' and 'CVG_METASHADEREnd' tags. They are used to automatically update the code inside them. So don't remove them.</li>
 <li>Inside the previous tags there is automatic meta-shaders defines values([MORE_HERE]=>link to metashaders):
	<ul>
		<li>GETTEX is a macro to get pixel from the texture[texture2D|textureRect]</li>
		<li>IMGTYPE is a macro to define the type of the texture[uniform sampler2D|uniform samplerRect]</li>
		<li>GPUCV_FILTER is a flag to define if this filter is used inside GpuCV or from an external shader compiler.</li>
	</ul>
		<br>See ShaderObject::ParseFilename() for more details on meta-shaders.</li>
	
 <li>'IMGTYPE BaseImage' define the source image 1.</li>
 <li>'IMGTYPE Image0' define the source image 2, not required for every shaders.</li>
 <li>'IMGTYPE ImageX' define the source image X if more than 2 images.</li>
 <li>'uniform float[n]' define the table of n parameters, n must correspond to the paramNbr given to TemplateOperator().</li>
 </ul>
 \warning You have to respect this synthaxe, otherwise your shaders will not be compatible with the library.
 \warning Only one shader program per file.
 
 \par Default header
 *\code
	/*License terms
	....*/
	//Add Fragment Shader
	//CVG_METASHADERBegin
	#define GETTEX //function to get texture value
	#define IMGTYPE //texture type
	//---------------------CVG_METASHADEREnd
	IMGTYPE BaseImage; // source imag
	...//custom values
 \endcode
 
 \par Add two images
 *\code
	...//Default header
	IMGTYPE Image0;    // second image
 \endcode
 
 \par Add two images using a mask
 *\code
	...//Default header
	IMGTYPE Image0;    // second image
	IMGTYPE Image1;    // mask image
 \endcode
 
 \par Add one image with scalar
 *\code
	...//Default header
	uniform float Params[4];	//scalar of 4 float
 \endcode
 \par Add one image with scalar using a mask
 *\code
	...//Default header
	uniform float Params[4];	//scalar of 4 float
	IMGTYPE Image0; 	// mask image
 \endcode
 
 
 
 *\subsection TUTO_CREATE_OP_BASE__STP2__WRITE_SHADER_BODY Shader file body
\par Add two images
 Here is the main() body of an 'addition' with two images.
 *\code
void main(void)
{
	//get current pixels values from each textures.
    vec4 img1 = GETTEX(BaseImage, gl_TexCoord[0].st).rgba;
	vec4 img2 = GETTEX(Image0, gl_TexCoord[0].st).rgba;
	//apply the operators
	gl_FragColor = vec4(img1 + img2);
}
\endcode

\par Add two images using a mask
\code
void main(void)
{
    vec4 img1 = GETTEX(BaseImage, gl_TexCoord[0].st).rgba;
    vec4 mask = GETTEX(Image1, gl_TexCoord[0].st).rgba;
    if(mask.r!=0)
	{
		vec4 img2 = GETTEX(Image0, gl_TexCoord[0].st).rgba;
		gl_FragColor = vec4(img1 + img2);
	}
	else
		gl_FragColor = img1;
}
\endcode

\par Add one image with scalar
\code
void main(void)
{
    vec4 img1 = GETTEX(BaseImage, gl_TexCoord[0].st).rgba;
    vec4 img2 = vec4(Params[0], Params[1], Params[2], Params[3]);
    gl_FragColor = vec4(img1 + img2);
}
\endcode

\par Add one image with scalar using a mask
\code
void main(void)
{
    vec4 img1 = GETTEX(BaseImage, gl_TexCoord[0].st).rgba;
	vec4 mask = GETTEX(Image1, gl_TexCoord[0].st).rgba;
    if(mask.r!=0)
	{
		vec4 img2 = vec4(Params[0], Params[1], Params[2], Params[3]);
		gl_FragColor = vec4(img1 + img2);
	}
	else
		gl_FragColor = img1;
}
\endcode


\section TUTO_CREATE_OP_GLSL__STP3__RENDER_2_TEXTURE OpenGL rendering to a texture/IplImage

One of the main mechanism used in OpenGL based GPGPU applications is rendering to texture. GpuCV use it to render the result of a GLSL shader to the target image/texture. It is also possible to render some OpenGL functions directly to a texture without using shader (see previous section). IplImage is the base format to manage images in OpenCV. You can use the high-level solution that manage all the OpenCV/GpuCV interactions (might be a bit slower) or get a pointer to the corresponding CvgArr pointer to have a closer control.

\subsection TUTO_CREATE_OP_GLSL__STP3__RENDER_2_TEXTURE__IPLIMAGES Using IplImages(high-level)

\code
//..we have an IplImage * named Ipl_GLDest.
cvgSetRenderToTexture(Ipl_GLDest);// start rendering to Ipl_GLDest
cvgInitGLView(Ipl_GLDest);// init OpenGL viewport using the Ipl_GLDest image properties (size,...)
//..
//.. here, place your OpenGL drawing code..
//..
cvgUnsetRenderToTexture(Ipl_GLDest);// stop rendering to Ipl_GLDest
// rendering is done...
// if you want your data back to CPU, ask for synchronization
cvgSynchronize(Ipl_GLDest);
\endcode

\note This method might be slower due to some wrapping and testing code into each funcions (cvgSetRenderToTexture()/cvgInitGLView()/cvgUnsetRenderToTexture()) used to retrieve the corresponding CvgArr from the IplImage.
\note Use this method if you have a 'C' application.


\subsection TUTO_CREATE_OP_GLSL__STP3__RENDER_2_TEXTURE__CVGARR Using CvgArr and the OpenGL data descriptor DataDsc_GLTex(middle-level)
CvgArr is the GpuCV corresponding format to OpenCV IplImages, it unherits from class DataContainer. DataContainer can contains several instances of the image of different types. We will use the DataDsc_GLTex type which manage interactions between GpuCV and OpenGL textures.

\code
//..we have an IplImage * named Ipl_GLDest.
//..we need the corresponding CvgArr named CvgArr_GLDest.
DataContainer * CvgArr_GLDest		= GPUCV_GET_TEX(Ipl_GLDest);
SG_Assert(CvgArr_GLDest, "No CvgArr for Ipl_GLDest.");// test result.
//..now we need the OpenGL texture data descriptor DataDsc_GLTex named DDGL_GLDest.
DataDsc_GLTex * DDGL_GLDest		= CvgArr_GLDest->GetDataDesc<DataDsc_GLTex>();
SG_Assert(DDGL_GLDest, "No DataDsc_GLTex for CvgArr.");	// test result.

DDGL_GLDest->SetRenderToTexture();		// start rendering to DDGL_GLDest
DDGL_GLDest->InitGLView();
//..
//.. here, place your OpenGL drawing code..
//..

DDGL_GLDest->UnsetRenderToTexture();		// stop rendering to DDGL_GLDest
// rendering is done...

// if you want your data back to CPU, ask for synchronization
// we ask the DataContainer to copy data back to CPU, in our case CPU data are managed by the data descriptor DataDesc_CPU.
// the bool flag is to enable data transfer.
CvgArr_GLDest->SetLocation<DataDsc_CPU>(true);
\endcode

\note Any memory allocation are done by the functions SetRenderToTexture() for the OpenGL texture or by SetLocation<DataDsc_CPU>() for the IplImage buffer only if required.
\warning Be aware that you should not call any functions to swap OpenGL frame buffers between SetRenderToTexture() and UnsetRenderToTexture().




Now you have written your first GpuCV operator, go to section \ref TUTO_TEST_OP to try and benchmark it.

\note As you can see, a quite simple 'addition' filter might require 4 different files, one for each case. Having to many shader files can become confusing for developpers and users and hard to maintain up to date. The use of meta-shader can reduce significantly the number file involved, continue to next tutorial.
*/

 
